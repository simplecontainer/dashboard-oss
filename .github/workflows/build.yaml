name: Dashboard CI/CD

on:
  push:
    branches-ignore:
      - main
    paths-ignore:
      - 'README.md'
      - 'scripts/**'
      - 'LICENSE'
      - '.github/resources/**'
      - '.gitignore'
      - '.github/**'
  workflow_dispatch:
    inputs:
      component:
        description: 'Component to release'
        required: true
        default: 'all'
        type: choice
        options:
          - dashboard
      test_name:
        description: 'Optional test name to run'
        required: false
        type: string
      test_flags:
        description: 'Optional test flags'
        required: false
        type: string

jobs:
  prepare-release:
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.generate_tag.outputs.tag }}
      matrix: ${{ steps.generate_tag.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_USER_PAT }}
          show-progress: false

      - name: Generate tag name for workflow dispatch
        id: generate_tag
        run: |
          COMPONENT="${{ github.event.inputs.component || 'all' }}"
          VERSION=$(cat version)
          TAG="${VERSION}"

          echo "Generated tags: $TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

          MATRIX=$(printf '[{"tag": "%s", "component":"dashboard-oss"}]' "$TAG")

          echo "$MATRIX" | jq -c
          echo "matrix=$(echo "$MATRIX" | jq -c)" >> $GITHUB_OUTPUT

  release:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [ prepare-release ]
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_USER_PAT }}
          show-progress: false

      - name: Parse matrix and run sequentially
        run: |
          matrix=$(echo '${{ needs.prepare-release.outputs.matrix }}' | jq -c '.[]')
          
          for item in $matrix; do
            COMPONENT=$(echo $item | jq -r '.component')
            TAG=$(echo $item | jq -r '.tag')
          
            echo "Processing $COMPONENT with tag $TAG"
          
            VERSION=$(cat version)
            VERSION=$(.github/scripts/version.sh "$VERSION" "${{ github.event.head_commit.message }}")
            echo "$VERSION" > version
          
            git config user.name "actions"
            git config user.email "actions-user@github.com"
            git add version
            git commit -m "Automated version tracking for $TAG" || echo "No changes to commit"
            git pull
            git tag "$TAG"
            git push origin main --tags
          done